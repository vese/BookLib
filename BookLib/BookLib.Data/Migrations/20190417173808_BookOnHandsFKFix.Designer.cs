// <auto-generated />
using System;
using BookLib.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookLib.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190417173808_BookOnHandsFKFix")]
    partial class BookOnHandsFKFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookLib.Models.DBModels.ApplicationUser", b =>
            {
                b.Property<string>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<int>("AccessFailedCount");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken();

                b.Property<string>("Email")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed");

                b.Property<int>("Expired");

                b.Property<bool>("LockoutEnabled");

                b.Property<DateTimeOffset?>("LockoutEnd");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256);

                b.Property<int>("NotReturned");

                b.Property<int>("OnHands");

                b.Property<string>("PasswordHash");

                b.Property<string>("PhoneNumber");

                b.Property<bool>("PhoneNumberConfirmed");

                b.Property<int>("Returned");

                b.Property<string>("SecurityStamp");

                b.Property<bool>("TwoFactorEnabled");

                b.Property<string>("UserName")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Author", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .IsRequired();

                b.HasKey("Id");

                b.ToTable("Author");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Availability", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("BookId");

                b.Property<int>("FreeCount");

                b.Property<int>("NotReturnedCount");

                b.Property<int>("OnHandsCount");

                b.Property<int>("TotalCount");

                b.HasKey("Id");

                b.HasIndex("BookId")
                    .IsUnique();

                b.ToTable("Availability");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Book", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("AuthorId");

                b.Property<int>("CategoryId");

                b.Property<string>("Description")
                    .IsRequired();

                b.Property<int>("GenreId");

                b.Property<string>("Name")
                    .IsRequired();

                b.Property<int>("PublisherId");

                b.Property<int>("ReleaseYear");

                b.Property<int?>("SeriesId");

                b.HasKey("Id");

                b.HasIndex("AuthorId");

                b.HasIndex("CategoryId");

                b.HasIndex("GenreId");

                b.HasIndex("PublisherId");

                b.HasIndex("SeriesId");

                b.ToTable("Book");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.BookOnHands", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("BookId");

                b.Property<bool>("Expired");

                b.Property<DateTime?>("ReturnDate")
                    .HasColumnType("datetime");

                b.Property<DateTime>("TakingDate")
                    .HasColumnType("datetime");

                b.Property<string>("UserId");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.HasIndex("UserId");

                b.ToTable("BookOnHands");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Category", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .IsRequired();

                b.HasKey("Id");

                b.ToTable("Category");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Comment", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("BookId");

                b.Property<int?>("Mark");

                b.Property<string>("Text")
                    .IsRequired();

                b.Property<string>("UserId");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.HasIndex("UserId");

                b.ToTable("Comment");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Genre", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("CategoryId");

                b.Property<string>("Name")
                    .IsRequired();

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.ToTable("Genre");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Publisher", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .IsRequired();

                b.HasKey("Id");

                b.ToTable("Publisher");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.QueueOnBook", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("BookId");

                b.Property<int>("Position");

                b.Property<string>("UserId");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.HasIndex("UserId");

                b.ToTable("QueueOnBook");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.ReadBook", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("BookId");

                b.Property<string>("UserId");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.HasIndex("UserId");

                b.ToTable("ReadBook");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Series", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("BooksCount");

                b.Property<string>("Name")
                    .IsRequired();

                b.HasKey("Id");

                b.ToTable("Series");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.SheduledBook", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("BookId");

                b.Property<string>("UserId");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.HasIndex("UserId");

                b.ToTable("SheduledBook");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken();

                b.Property<string>("Name")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType");

                b.Property<string>("ClaimValue");

                b.Property<string>("RoleId")
                    .IsRequired();

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType");

                b.Property<string>("ClaimValue");

                b.Property<string>("UserId")
                    .IsRequired();

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider");

                b.Property<string>("ProviderKey");

                b.Property<string>("ProviderDisplayName");

                b.Property<string>("UserId")
                    .IsRequired();

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId");

                b.Property<string>("RoleId");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId");

                b.Property<string>("LoginProvider");

                b.Property<string>("Name");

                b.Property<string>("Value");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Availability", b =>
            {
                b.HasOne("BookLib.Models.DBModels.Book", "BookNavigation")
                    .WithOne("Availability")
                    .HasForeignKey("BookLib.Models.DBModels.Availability", "BookId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Book", b =>
            {
                b.HasOne("BookLib.Models.DBModels.Author", "AuthorNavigation")
                    .WithMany("Books")
                    .HasForeignKey("AuthorId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("BookLib.Models.DBModels.Category", "CategoryNavigation")
                    .WithMany("Books")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.HasOne("BookLib.Models.DBModels.Genre", "GenreNavigation")
                    .WithMany("Books")
                    .HasForeignKey("GenreId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("BookLib.Models.DBModels.Publisher", "PublisherNavigation")
                    .WithMany("Books")
                    .HasForeignKey("PublisherId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("BookLib.Models.DBModels.Series", "SeriesNavigation")
                    .WithMany("Books")
                    .HasForeignKey("SeriesId");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.BookOnHands", b =>
            {
                b.HasOne("BookLib.Models.DBModels.Book", "BookNavigation")
                    .WithMany("BooksOnHands")
                    .HasForeignKey("BookId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("BookLib.Models.DBModels.ApplicationUser", "UserNavigation")
                    .WithMany("BooksOnHands")
                    .HasForeignKey("UserId");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Comment", b =>
            {
                b.HasOne("BookLib.Models.DBModels.Book", "BookNavigation")
                    .WithMany("Comments")
                    .HasForeignKey("BookId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("BookLib.Models.DBModels.ApplicationUser", "UserNavigation")
                    .WithMany("Comments")
                    .HasForeignKey("UserId");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.Genre", b =>
            {
                b.HasOne("BookLib.Models.DBModels.Category", "CategoryNavigation")
                    .WithMany("Genres")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("BookLib.Models.DBModels.QueueOnBook", b =>
            {
                b.HasOne("BookLib.Models.DBModels.Book", "BookNavigation")
                    .WithMany("QueuesOnBook")
                    .HasForeignKey("BookId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("BookLib.Models.DBModels.ApplicationUser", "UserNavigation")
                    .WithMany("QueuesOnBook")
                    .HasForeignKey("UserId");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.ReadBook", b =>
            {
                b.HasOne("BookLib.Models.DBModels.Book", "BookNavigation")
                    .WithMany("ReadBooks")
                    .HasForeignKey("BookId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("BookLib.Models.DBModels.ApplicationUser", "UserNavigation")
                    .WithMany("ReadBooks")
                    .HasForeignKey("UserId");
            });

            modelBuilder.Entity("BookLib.Models.DBModels.SheduledBook", b =>
            {
                b.HasOne("BookLib.Models.DBModels.Book", "BookNavigation")
                    .WithMany("SheduledBooks")
                    .HasForeignKey("BookId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("BookLib.Models.DBModels.ApplicationUser", "UserNavigation")
                    .WithMany("SheduledBooks")
                    .HasForeignKey("UserId");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("BookLib.Models.DBModels.ApplicationUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("BookLib.Models.DBModels.ApplicationUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("BookLib.Models.DBModels.ApplicationUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("BookLib.Models.DBModels.ApplicationUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });
#pragma warning restore 612, 618
        }
    }
}
